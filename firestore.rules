rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =================================================================
    // Users Collection
    // =================================================================
    match /users/{userId} {
      // Any authenticated user can view a profile (for searching/adding friends)
      allow read: if isAuthenticated();

      // A user can only create their own profile document
      allow create: if isOwner(userId);

      // A user can only update their own profile
      allow update: if isOwner(userId);

      // Users cannot delete their profiles through the client
      allow delete: if false;
    }

    // =================================================================
    // Events Collection
    // =================================================================
    match /events/{eventId} {
      // A user can read, write, and delete events that belong to them.
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // =================================================================
    // Friendships Collection
    // =================================================================
    match /friendships/{friendshipId} {
      // A user can only read a friendship document if they are part of it.
      allow read: if isAuthenticated() && request.auth.uid in resource.data.users;

      // A user can create a friendship if they are the requester and are included in the users array.
      allow create: if isAuthenticated() && isOwner(request.resource.data.requesterId) && request.auth.uid in request.resource.data.users;

      // A user can update (accept/decline) a friendship if they are part of it.
      // More specific logic could be added to prevent users from changing the status from 'accepted' back to 'pending', for example.
      allow update: if isAuthenticated() && request.auth.uid in resource.data.users;

      // Friendships should likely be marked as 'blocked' or 'inactive' rather than deleted from the client.
      allow delete: if false;
    }

    // =================================================================
    // Event Proposals Collection
    // =================================================================
    match /eventProposals/{proposalId} {
      // A user can read a proposal if they are the proposer or the recipient.
      allow read: if isAuthenticated() && (isOwner(resource.data.proposerId) || isOwner(resource.data.recipientId));

      // A user can create a proposal for someone else.
      allow create: if isAuthenticated() && isOwner(request.resource.data.proposerId);

      // Only the recipient can update the proposal (to accept/decline).
      allow update: if isAuthenticated() && isOwner(resource.data.recipientId);

      allow delete: if false;
    }

    // =================================================================
    // User Groups Collection
    // =================================================================
    match /groups/{groupId} {
      // Users can read groups they are a member of.
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;

      // Only the group creator can write to the group document.
      // A more complex rule would allow members to perform certain actions.
      allow write: if isAuthenticated() && isOwner(resource.data.creatorId);
    }

    // =================================================================
    // Notifications and other private collections
    // =================================================================
    // These collections should only be written to by backend functions.
    // Client-side reading is allowed for the user who owns the notification.
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow write: if false; // Only backend can create notifications
    }

    match /google_tokens/{userId} {
      // No client access whatsoever.
      allow read, write: if false;
    }

    match /reports/{reportId} {
       // Only backend can read reports. Users can create them.
      allow read: if false;
      allow create: if isAuthenticated() && isOwner(request.resource.data.reporterId);
    }
  }
}
